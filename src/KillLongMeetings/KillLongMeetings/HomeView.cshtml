@using Cassette.Nancy

@{
    Bundles.Reference("Content/css");
    Bundles.Reference("Content/scripts");
}

<!DOCTYPE html>
<html lang="en">
  <head>
	<meta charset="utf-8">
	<title>Kill long meetings - Measure time and cost</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta name="description" content="An application that measures times and costs of your meeting">
	<meta name="author" content="Jef Claes, Christophe Geers">
	
	<!--[if lt IE 9]>
	  <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
    	
    @Bundles.RenderStylesheets()
  </head>

  <body>     
    <div class="navbar navbar-fixed-top">
        <div class="navbar-inner">
	        <div class="container">	   
                <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
	            <a class="brand" href="../">Kill long meetings</a>	            
                <div class="nav-collapse collapse">
                    <ul class="nav">
                      <li>
                        <a href="http://twitter.com/JefClaes">@@JefClaes </a>
                      </li>
                      <li>
                        <a href="http://twitter.com/cgeers">@@cgeers </a>
                      </li>
                      <li>
                        <a href="http://github.com/JefClaes/KillLongMeetings">GitHub </a>
                      </li>                       
                    </ul>
                </div>
	        </div>
        </div>
    </div>

	<div class="container">

    <div class="row">
        <div class="span12 count">        
            <span data-bind="text: totalCostFormatted"></span>            
        </div>               
    </div>

     <div class="row">
        <div class="span12 count">        
            <span data-bind="text: secondsSinceStartFormatted"></span>
        </div>               
    </div>    

    <div class="row">
        <div class="span11">
            <div id="progressbar">
            </div>           
        </div>
        <div class="span1">
            <span data-bind="text: progressFormatted"></span>
        </div>
    </div>

	<form class="form-horizontal well">
		<div class="control-group">
		    <label class="control-label" for="averageSalary">Average salary ($/hour)</label>
		    <div class="controls">
                <input type="text" class="enableTooltip" id="averageSalary" 
                        data-bind="value: averageSalary" 
                        data-title="This wildly depends on where you live, which field you're in, contractor or not, etc.. A WolframAlpha search can give you an idea quickly."
                        data-placement="right" />
		    </div>
        </div>
          
        <div class="control-group">
            <label class="control-label" for="numberOfPersons">Number of persons</label>
		    <div class="controls">
                <input type="text" id="numberOfPersons" data-bind="value: numberOfPersons" />
		    </div>
		</div>
          
        <div class="control-group">
            <label class="control-label" for="costs">Costs ($)</label>
		    <div class="controls">
                <input type="text" class="enableTooltip" id="costs" 
                        data-bind="value: costs" 
                        data-title="Fixed costs: renting a meeting room, sandwiches, coffee.." 
                        data-placement="right" />
		    </div>
		</div>  
            
        <div class="control-group">
            <label class="control-label" for="maxDuration">Max duration (minutes)</label>
		    <div class="controls">
                <input type="text" class="enableTooltip" id="maxDuration" 
                        data-bind="value: maximumDuration" 
                        data-title="In reality, the average meeting takes more than one hour. Insane right? 30 minutes should be plenty of time." 
                        data-placement="right" />
		    </div>
		</div>        
         
		<button type="button" class="btn btn-primary" data-bind="click: start, text: actionText">Start</button>			
        <button type="button" class="btn btn-primary" data-bind="click: reset">Reset</button>			
    </form>        
        
    </div><!-- /container -->
	
	@Bundles.RenderScripts()
	<script type="text/javascript">
    
	    function ViewModel() {
	        var self = this;

	        var startIntervalId = undefined;

	        this.isStarted = ko.observable(false);

	        this.averageSalary = ko.observable(50);
	        this.numberOfPersons = ko.observable(7);
	        this.costs = ko.observable(10);
	        this.maximumDuration = ko.observable(30);
	        this.percentCompleted = ko.observable(0);
	        
			this.secondsSinceStart = ko.observable(0);
			this.secondsSinceStartFormatted = ko.computed(function () {
			    var hours = parseInt(self.secondsSinceStart() / 3600) % 24;
			    var minutes = parseInt(self.secondsSinceStart() / 60) % 60;
			    var seconds = self.secondsSinceStart() % 60;

			    return hours + "h " + minutes + "m " + seconds + "s";
			});
            
			this.totalCost = ko.computed(function () {
			    var costs = parseInt(self.costs());
			    var salaryCosts = (self.secondsSinceStart() * (self.averageSalary() / 3600)) * self.numberOfPersons();

			    return Math.round(salaryCosts + costs);
			});

			this.totalCostFormatted = ko.computed(function () {
			    return self.totalCost() + "$";
			});

			this.actionText = ko.observable("Start");
	        
			this.progressFormatted = ko.computed(function () {
			    return self.percentCompleted() + "%";
			});

	        this.start = function () {
	            this.isStarted(!self.isStarted());
	            this.actionText(this.isStarted() ? "Pause" : "Continue");
                	            
	            $("#progressbar").on("positionChanged", function (event) {
	                self.percentCompleted(event.percent);
	            });

	            if (!startIntervalId) {
	                startIntervalId = setInterval(function () {
	                    if (self.isStarted()) {
	                        $('#progressbar').progressbar('setMaximum', self.maximumDuration() * 60);
	                        self.secondsSinceStart(self.secondsSinceStart() + 1);
	                        $('#progressbar').progressbar('setPosition', self.secondsSinceStart());
	                    }
	                }, 1000);
	            }
	        };

	        this.reset = function () {
	            $('#progressbar').progressbar('reset');

			    clearInterval(startIntervalId);
			    startIntervalId = undefined;

			    this.isStarted(false);
			    this.secondsSinceStart(0);
			    this.actionText("Start");
			};
	    }

	    $(function () {
	        $(".enableTooltip").tooltip();

	        $('#progressbar').progressbar({
	            warningMarker: 50,
	            dangerMarker: 75,
	            interval: 1000,
	            step: 1
	        });

	        $('#averageSalary').spinedit({ value: 50, minimum: 1, maximum: 1000 });
	        $('#numberOfPersons').spinedit({ value: 7, minimum: 1, maximum: 100 });
	        $('#costs').spinedit({ value: 10, minimum: 0, maximum: 1000 });
	        $('#maxDuration').spinedit({ value: 30, minimum: 1, maximum: 1000 });	        

	        var model = new ViewModel();
	        ko.applyBindings(model);
	    });

	</script>

  </body>
</html>
