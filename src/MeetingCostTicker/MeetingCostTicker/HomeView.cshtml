
<!DOCTYPE html>
<html lang="en">
  <head>
	<meta charset="utf-8">
	<title>Bootswatch: Superhero</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta name="description" content="">
	<meta name="author" content="">

	<!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
	<!--[if lt IE 9]>
	  <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->

	<!-- Le styles -->
	<link href="Content/css/bootstrap.css" rel="stylesheet">
	<link href="Content/css/bootstrap-responsive.min.css" rel="stylesheet">
	<link href="Content/css/docs.css" rel="stylesheet">

  </head>

  <body class="preview" data-spy="scroll" data-target=".subnav" data-offset="80">  
   <!-- Navbar
	================================================== -->
    <div class="navbar navbar-fixed-top">
        <div class="navbar-inner">
	        <div class="container">	   
	            <a class="brand" href="../">Bootswatch</a>
	            <div class="nav-collapse" id="main-menu">        
                    <ul class="nav" id="main-menu-left">	            
	                    <li><a id="swatch-link" href="/#gallery">Gallery</a></li>	            
                    </ul>                       
	            </div>
	        </div>
        </div>
    </div>

	<div class="container">

    <div class="row">
        <div class="span12 count">        
            <span data-bind="text: totalCostFormatted"></span><br />
            <span data-bind="text: secondsSinceStartFormatted"></span>
        </div>
    </div>
    <!--
    <header class="jumbotron subhead" id="overview">
      <div class="row">
	    <div class="span6">
	      <h1>MeetingCostCounter</h1>
	      <p class="lead">A preview of changes in this swatch.</p>
	    </div>	  
      </div>     
    </header>
    -->

    
	<form class="form-horizontal well">
	    <fieldset>       
        
        <div class="row">
            <div class="span3">
		        <div class="control-group">
		            <label class="control-label" for="input01">Average salary ($/hour)</label>
		            <div class="controls">
			            <input type="text" class="input-medium" id="averageSalary" data-bind="value: averageSalary" placeholder="">			                                    
		            </div>
                </div>
            </div>

            <div class="span3">
                <div class="control-group">
                    <label class="control-label" for="input01"># of persons</label>
		            <div class="controls">
			            <input type="text" class="input-medium" id="numberOfPersons" data-bind="value: numberOfPersons" placeholder="">			                                
		            </div>
		        </div>
            </div>

            <div class="span3">
                <div class="control-group">
                    <label class="control-label" for="input01">Costs ($)</label>
		            <div class="controls">
			            <input type="text" class="input-medium" id="costs" data-bind="value: costs" placeholder="">			                                
		            </div>
		        </div>
            </div>
        </div>            
          
        <div class="row">
		    <div class="span12 jumbotron">
		        <button type="button" class="btn btn-primary" data-bind="click: start, text: actionText">Start</button>			
                <button type="button" class="btn btn-primary" data-bind="click: reset">Reset</button>			
            </div>
        </div>      		          		                            

	    </fieldset>
	</form>
            
      

	<footer class="footer">
	<p class="pull-right"><a href="#">Back to top</a></p>
	</footer>

</div><!-- /container -->
	
	<script src="Content/scripts/jquery.min.js" type="text/javascript"></script>
	<script src="Content/scripts/bootstrap.min.js" type="text/javascript"></script>
    <script src="Content/scripts/knockout-2.1.0.js" type="text/javascript"></script>
	<script type="text/javascript">
    
	    function ViewModel() {
	        var self = this;

	        var startIntervalId = undefined;

	        this.isStarted = ko.observable(false);

	        this.averageSalary = ko.observable(50);
	        this.numberOfPersons = ko.observable(1);
			this.costs = ko.observable(20);
			
	        this.totalCost = ko.observable(0);
			this.totalCostFormatted = ko.computed(function () {
			    return self.totalCost() + "$";
			});
	        
			this.secondsSinceStart = ko.observable(0);
			this.secondsSinceStartFormatted = ko.computed(function () {
			    var hours = parseInt(self.secondsSinceStart() / 3600) % 24;
			    var minutes = parseInt(self.secondsSinceStart() / 60) % 60;
			    var seconds = self.secondsSinceStart() % 60;

			    return (hours < 10 ? "0" + hours : hours) + "-" + (minutes < 10 ? "0" + minutes : minutes) + "-" + (seconds < 10 ? "0" + seconds : seconds);
			});
	        this.actionText = ko.observable("Start");

	        this.start = function () {
	            this.isStarted(!self.isStarted());
	            this.actionText(this.isStarted() ? "Pause" : "Continue");

	            console.log(startIntervalId);

	            if (!startIntervalId) {
	                startIntervalId = setInterval(function () {
	                    if (self.isStarted()) {
	                        self.calculateTotalCost();
	                        self.secondsSinceStart(self.secondsSinceStart() + 1);
	                    }
	                }, 1000);
	            }
	        };
	        
			this.calculateTotalCost = function () {
			    var costs = parseInt(self.costs());
			    var saleryCosts = (self.secondsSinceStart() * (self.averageSalary() / 3600)) * self.numberOfPersons();
			    var totalCost = Math.round(saleryCosts + costs);

			    self.totalCost(totalCost);
			};
		
			this.reset = function () {
			    clearInterval(startIntervalId);
			    startIntervalId = undefined;

			    this.totalCost(0);
			    this.secondsSinceStart(0);
			    this.actionText("Start");
			};
	    }

	    $(function () {	        
	        ko.applyBindings(new ViewModel());
	    });

	</script>

  </body>
</html>
